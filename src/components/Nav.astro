---
import { Icon } from "astro-icon";

import ham from "../icons/icon-hamburger.svg";
import close from "../icons/icon-close.svg";
import Button from "./Button.astro";

const navLinks = [
   {
      name: "Home",
      url: "/",
   },
   {
      name: "About",
      url: "#",
   },
   {
      name: "Contact",
      url: "#",
   },
   {
      name: "Blog",
      url: "#",
   },
   {
      name: "Careers",
      url: "#",
   },
];
---

<header>
   <div class="content-container">
      <nav>
         <Icon name="logo" class="logo" />
         <ul class="desktop-links" role="navigation">
            {
               navLinks.map((link) => (
                  <li>
                     <a href={link.url}>{link.name}</a>
                  </li>
               ))
            }
         </ul>
         <div class="display">
            <Button />
         </div>
         <button class="btn" aria-expanded="false" aria-label="Open mobile nav">
            <img src="src/icons/icon-hamburger.svg" alt="hamburger button" />
         </button>
         <!-- dropdown mobile nav -->
         <ul class="mobile-links">
            {
               navLinks.map((link) => (
                  <li>
                     <a href={link.url}>{link.name}</a>
                  </li>
               ))
            }
         </ul>
         <!-- dropdown mobile nav end -->
         <div class="overlay"></div>
      </nav>
   </div>
</header>

<style>
   header {
      position: relative;
      background-color: var(--white);
   }

   a {
      font-size: var(--fs-650);
      line-height: var(--fh-50);
      letter-spacing: var(--fls-50);
   }

   nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      min-height: 64px;
   }

   .desktop-links {
      display: none;
   }

   /* Mobile nav */
   .desktop-links a {
      color: var(--grayish-blue);
   }

   .desktop-links a:hover {
      color: var(--dark-blue);
   }

   .mobile-links a {
      color: var(--dark-blue);
   }
   .mobile-links {
      z-index: 10;
      position: absolute;
      top: 90px;
      width: 327px;
      display: flex;
      align-items: center;
      flex-direction: column;
      row-gap: 24px;
      background-color: var(--white);
      padding-top: 32px;
      padding-bottom: 32px;
      border-radius: 7px;
      visibility: hidden;
      transition: visibility 0.15s ease-in-out;
   }

   .btn[aria-expanded="true"] + .mobile-links {
      visibility: visible;
   }

   .overlay {
      position: fixed;
      z-index: 1;
      top: 64px;
      bottom: 0;
      right: 0;
      left: 0;
      background-image: linear-gradient(
         180deg,
         #2d314d 0%,
         rgba(45, 49, 77, 0.0001) 100%
      );
      opacity: 0;
      transition: opacity 0.15s ease-in-out;
   }

   .btn[aria-expanded="true"] ~ .overlay {
      opacity: 1;
   }

   /* Mobile nav end */

   .btn {
      background: transparent;
      border-color: transparent;
   }

   .logo {
      height: 20px;
   }

   /* for the button component */
   .display {
      display: none;
   }

   @media (min-width: 500px) {
      nav {
         max-height: 80px;
      }

      .desktop-links {
         display: flex;
         column-gap: 30px;
      }

      /* desktop hover effect */
      .desktop-links li {
         position: relative;
      }

      .desktop-links li:after {
         content: "";
         position: absolute;
         height: 5px;
         width: 0;
         background: var(--lime-green);
         bottom: -25px;
         right: 0%;
         transition: 0.15s;
      }

      .desktop-links li:hover:after {
         width: 100%;
         left: 0%;
      }

      /* desktop hover effect end */

      .btn {
         display: none;
      }

      /* for the button component */
      .display {
         display: block;
      }

      /* Mobile nav */
      .mobile-links {
         display: none;
      }

      .overlay {
         display: none;
      }

      /* Mobile nav end */
   }
</style>

<script is:inline define:vars={{ ham, close }}>
   const btn = document.querySelector(".btn");
   const body = document.body;
   const btnChild = btn.children[0];

   btn.addEventListener("click", function () {
      btn.setAttribute(
         "aria-expanded",
         btn.getAttribute("aria-expanded") === "false" ? "true" : "false"
      );
      let ariaExpanded = btn.getAttribute("aria-expanded");
      imgSwap(body, btnChild);
      addRemoveClass(body, ariaExpanded);
   });

   function imgSwap(body, btnChild) {
      //toggle class on body to stop scrolling when overlay is active
      if (btnChild.src.match(ham)) {
         body.classList.add("overlay-scroll-stop");
         btnChild.src = `${close}`;
      } else {
         body.classList.remove("overlay-scroll-stop");
         btnChild.src = `${ham}`;
      }
   }

   //check if body has overlay class
   //remove class on body if menu is left open and > 700
   //if attributevalue is true (menu open) and window.innerwidth < 500 add the class back
   function addRemoveClass(body, ariaExpanded) {
     
      if (body.classList.contains("overlay-scroll-stop")) {
        
         window.addEventListener("resize", function () {
            if (window.innerWidth > 700) {
              
               body.classList.remove("overlay-scroll-stop");
            } 
         });
      }

      console.log("ariaExpanded second addEventListener:", ariaExpanded);

      window.addEventListener("resize", function () {
         if (ariaExpanded === "true" && window.innerWidth < 500) {
            console.log(
               "add overlay call resize < 500. ariaExpanded:",
               ariaExpanded
            );
            body.classList.add("overlay-scroll-stop");
         }
      });
   }
</script>
